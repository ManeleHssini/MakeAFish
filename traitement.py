# -*- coding: utf-8 -*-
"""Traitement

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12wPRqyZrrjuL6Jg3OBMLkDZO1YhSAJUR
"""

import fitz  # PyMuPDF
from PIL import Image, ImageChops
import io
import os

cm = 72 / 2.54  # conversion cm -> points PDF

# === üì∏ Fonctions pour la photo ===

def supprimer_bordures_blanches(image, tolerance=10):
    bg = Image.new(image.mode, image.size, (255, 255, 255))
    diff = ImageChops.difference(image, bg)
    bbox = diff.getbbox()
    return image.crop(bbox) if bbox else image

def preparer_photo(chemin_fichier):
    if chemin_fichier.lower().endswith('.pdf'):
        from pdf2image import convert_from_path
        images = convert_from_path(chemin_fichier)
        image = images[0]
    else:
        image = Image.open(chemin_fichier)

    if image.mode != 'RGB':
        image = image.convert('RGB')

    return supprimer_bordures_blanches(image)

def rogner_et_centrer(image, ratio_cible=(3.5, 4.5), zoom_out=1.0):
    largeur, hauteur = image.size
    ratio = ratio_cible[0] / ratio_cible[1]
    actuel = largeur / hauteur

    if actuel > ratio:
        new_w = int(hauteur * ratio)
        offset = (largeur - new_w) // 2
        cadre = (offset, 0, offset + new_w, hauteur)
    else:
        new_h = int(largeur / ratio)
        offset = (hauteur - new_h) // 2
        cadre = (0, offset, largeur, offset + new_h)

    centre_x = (cadre[0] + cadre[2]) // 2
    centre_y = (cadre[1] + cadre[3]) // 2
    largeur_crop = int((cadre[2] - cadre[0]) * zoom_out)
    hauteur_crop = int((cadre[3] - cadre[1]) * zoom_out)

    gauche = max(0, centre_x - largeur_crop // 2)
    haut = max(0, centre_y - hauteur_crop // 2)
    droite = min(largeur, centre_x + largeur_crop // 2)
    bas = min(hauteur, centre_y + hauteur_crop // 2)

    return image.crop((gauche, haut, droite, bas))

def redimensionner_photo(image, largeur_cm=3.5, hauteur_cm=4.0):
    pixels_par_cm = 40  # ~100 DPI
    return image.resize((int(largeur_cm * pixels_par_cm), int(hauteur_cm * pixels_par_cm)), Image.LANCZOS)

# === üõ†Ô∏è NOUVELLE APPROCHE : D√©coupe + Fusion intelligente ===

def fusion_intelligente_avec_photo(fiche_path, modele_path, photo_path, output_path="Fiche_Sanitaire_FINAL.pdf"):
    fiche_remplie = fitz.open(fiche_path)
    modele_vierge = fitz.open(modele_path)
    nouveau_pdf = fitz.open()

    for i in range(min(len(fiche_remplie), len(modele_vierge))):
        page_remplie = fiche_remplie[i]
        page_vierge = modele_vierge[i]

        hauteur_entete = 5.8 * cm
        zone_entete = fitz.Rect(0, 0, page_vierge.rect.width, hauteur_entete)

        nouvelle_page = nouveau_pdf.new_page(width=page_vierge.rect.width, height=page_vierge.rect.height)

        entete_pixmap = page_vierge.get_pixmap(clip=zone_entete, dpi=300)
        entete_img = Image.open(io.BytesIO(entete_pixmap.tobytes("png")))
        temp_entete_path = f"temp_entete_{i}.png"
        entete_img.save(temp_entete_path)

        nouvelle_page.insert_image(zone_entete, filename=temp_entete_path, keep_proportion=False)

        if i == 0:
            photo = preparer_photo(photo_path)
            photo = rogner_et_centrer(photo)
            photo = redimensionner_photo(photo)

            temp_photo_path = "temp_photo.png"
            photo.save(temp_photo_path)

            x, y = 15.7 * cm, 1.8 * cm
            w, h = 3.1 * cm, 3.6 * cm
            photo_rect = fitz.Rect(x, y, x + w, y + h)

            nouvelle_page.insert_image(photo_rect, filename=temp_photo_path, keep_proportion=False)
            os.remove(temp_photo_path)

        zone_corps_source = fitz.Rect(0, hauteur_entete - 0.3 * cm, page_remplie.rect.width, page_remplie.rect.height)
        zone_corps_destination = fitz.Rect(0, hauteur_entete, page_remplie.rect.width, page_remplie.rect.height)

        corps_pixmap = page_remplie.get_pixmap(clip=zone_corps_source, dpi=300)
        corps_img = Image.open(io.BytesIO(corps_pixmap.tobytes("png")))
        temp_corps_path = f"temp_corps_{i}.png"
        corps_img.save(temp_corps_path)

        nouvelle_page.insert_image(zone_corps_destination, filename=temp_corps_path, keep_proportion=False)

        os.remove(temp_entete_path)
        os.remove(temp_corps_path)

    nouveau_pdf.save(output_path)
    nouveau_pdf.close()
    fiche_remplie.close()
    modele_vierge.close()

    return output_path